#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <iomanip>
#include <vector>
#include <stdio.h>
#include "aes.h"

// Store byte matrices here
vector<BLOCK_MAT> blocks;
// Store key here
BLOCK key;
// Byte matrix
BLOCK_MAT block; 
// Number of bytes read
int bytesRead = 0;

// Expanded key length is 176 bytes for 128-bit keys
unsigned char expandedKey[176];


int main() {

  // Check how many bytes were read (will always be 1)
  unsigned int readBufSize = 0;

  // Buffer to hold 8 bits (1 byte)
  unsigned char byte;

  // Keep track of rows and columns when reading input into byte matrix
  int count = 0;
  cin.unsetf(ios_base::skipws);
  
  /*
  while(cin >> byte) {
    bytesRead += sizeof(byte);
    block.val[count] = byte;
    count++;

    if(count == 16) {
      blocks.push_back(block);
      count = 0;
    }
  }
  */
 
 // Keep track of rows and columns when reading input into byte matrix
  int row = 0;
  int col = 0;
  cin.unsetf(ios_base::skipws);
  while(cin >> byte) {
    bytesRead += sizeof(byte);
    if(count < 16) {
      key.val[count] = byte;
      count++;
    } else { 
      block.setVal(row, col, byte);
      row++;
      
      // Go to next col if we are at last row
      if(row == 4) {
        row = 0;
        col++;
      }
      // Reset matrix values and save matrix if we are at last element
      if(row == 3 && col == 3) {
        cin >> byte;
        block.setVal(row, col, byte);
        blocks.push_back(block);
        row = 0;
        col = 0;
      }
    }
  }

  unsigned char expandTest[16] = {
    0x2b, 0x7e, 0x15, 0x16,
    0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88,
    0x09, 0xcf, 0x4f, 0x3c
  };

  unsigned char key[16] = {
    0x00, 0x01, 0x02, 0x03, 
    0x04, 0x05, 0x06, 0x07, 
    0x08, 0x09, 0x0a, 0x0b, 
    0x0c, 0x0d, 0x0e, 0x0f
  };

  unsigned char text[16] = {
    0x00, 0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb,
    0xcc, 0xdd, 0xee, 0xff
  };
  

  
  //cout << "---------Testing expandKey----------\nBefore\n";
  //expandKey(expandTest);
  //cout << "After\n";
  //testOut(expandedKey, 176);



  //AES_Encrypt(text, key);
  
  // 63 ca b7 04 09 53 d0 51 cd 60 e0 e7 ba 70 e1 8c



  //testOut(text);


  //key = '000102030405060708090a0b0c0d0e0f';
  //text = '00112233445566778899aabbccddeeff';

  // TODO: Loop over blocks and encrypt each one of them
  
  /*
  for(int i = 1; i < blocks.size(); ++i) {
    AES_Encrypt(blocks[i].val, blocks[0].val);
    blocks[i].print();
    cout << endl;
  }
  */
  
  return 0;
}

void AES_Encrypt(unsigned char* state, unsigned char* key) {

  // Create expanded key
  expandKey(key);

  // Initial addRoundKey
  addRoundKey(state, expandedKey);

  printBlock(state);

  // Perform 10 rounds for 128-bit keys
  for(int i = 0; i <= ROUNDS; ++i) {
    cout << "ROUND: " << i << endl;
    cout << "----------------\n"; 
    subBytes(state);
    cout << "AFTER SUBBYTES\n";
    printBlock(state);
    shiftRows(state);
    cout << "AFTER SHIFTROWS\n";
    printBlock(state);
    if(i != ROUNDS)
      mixColumns(state);
    cout << "AFTER MIXCOLS\n";
    printBlock(state);

    addRoundKey(state, expandedKey+MAT_SIZE_FULL*i);
    cout << "AFTER ADDROUNDKEY\n";
    printBlock(state);
    cout << "----------------\n";
  }

}

void expandKey(unsigned char* in) {
  // Defined sizes for 128-bit keys according to Rijndael key schedule
  int n = 16;
  int b = 176;

  // Create expanded key of b bits
  unsigned char* expanded = new unsigned char[b];

  // The first n bytes of the expanded key are simply the encryption key.
  for(int i = 0; i < n; ++i) {
    expanded[i] = in[i];
    expandedKey[i] = in[i];
  }


  int r = 1; // The rcon iteration value i is set to 1
  int offset = n; 
  unsigned char tmp[4];

  // Until we have b bytes of expanded key, we do the following to generate n more bytes of expanded key:
  while(offset < b) {
    // We assign the value of the previous four bytes in the expanded key to tmp
    for(int i = 0; i < 4; ++i) {
      tmp[i] = expanded[offset - 4 + i];
    }

    // We perform the key schedule core (see above) on tmp every four blocks, with i as the rcon iteration value
    if(offset % n == 0) {
      scheduleCore(tmp, r);
      r++;
    }

    // We exclusive-OR tmp with the four-byte block n bytes before the new expanded key. 
    // This becomes the next 4 bytes in the expanded key
    for(int i = 0; i < 4; ++i) {
      expanded[offset] = tmp[i]^expanded[offset - n];
      expandedKey[offset] = expanded[offset];
      offset++;
    }
    
  }
}

void addRoundKey(unsigned char* in, unsigned char* key) {
  for(int i = 0; i < MAT_SIZE_FULL; ++i){
    in[i] = in[i] ^ key[i];
  }
}

void subBytes(unsigned char* in) {
  for(int i = 0; i < MAT_SIZE_FULL; ++i)
    in[i] = sbox(in[i]);
}

// Shift the last 12 bytes of input
void shiftRows(unsigned char* in) {
  unsigned char tmp[4];
  int offset = 0;
  for(int i = 1; i < 4; ++i) {
    offset += 4;
    // Copy row to tmp
    for(int j = 0; j < 4; ++j) {
      tmp[j] = in[offset + j];
    }

    // Shift places and store in input
    for(int j = 0; j < 4; ++j) {
      in[offset+j] = tmp[(j+i)%4];
    }
  }
}


void mixColumns(unsigned char* in) {
  
  int offset = 0;
  for(int i = 0; i < 4; ++i) {
    in[offset]   = multBy2(in[offset]) ^ multBy3(in[offset+1]) ^ in[offset+2] ^ in[offset+3];
    in[offset+1] = in[offset] ^ multBy2(in[offset+1]) ^ multBy3(in[offset+2]) ^ in[offset+3];
    in[offset+2] = in[offset] ^ in[offset+1] ^ multBy2(in[offset+2]) ^ multBy3(in[offset+3]);
    in[offset+3] = multBy3(in[offset]) ^ in[offset+1] ^ in[offset+2] ^ multBy2(in[offset+3]);
    offset += 4;
  }
  
 /*
  unsigned char t[4];
  for(int i=0;i<4;i++) {
      for(int j=0;j<4;j++)
          t[j]=in[4*i+j];
      for(int j=0;j<4;j++)
          in[4*i+j]=multBy2(t[j])^t[(j+3)%4]^t[(j+2)%4]^multBy3(t[(j+1)%4]);
  }
  */
}

/**
 * HELPERS
 */

// This operation is used as an inner loop in the key schedule
void scheduleCore(unsigned char* in, int r) {

  // Rotate input
  rotWord(in, 0);

  // Apply sbox values
  for(int i = 0; i < 4; ++i) 
    in[i] = sbox(in[i]);

  // On the first byte, add 2^i
  in[0] ^= rcon(r);
}

// Rotate word by shifting everything one step to the left
void rotWord(unsigned char* in, int offset) {
  unsigned char tmp = in[offset];
  for(int i = 0; i < MAT_SIZE-1; ++i) {
    in[i + offset] = in[ i + 1 + offset];
  }
  in[offset + 3] = tmp;
}


int sbox(int n) {
  int sbox[256] = {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 
  };

  return sbox[n];

}

int rcon(int n) {
  int rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };

  return rcon[n];
}

int multBy2(int n) {
  int m2[256] = {
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
  };
  return m2[n];
}

int multBy3(int n) {
  int m3[256] = {
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
  };
  return m3[n];
}



// h
#ifndef AES_H
#define AES_H

using namespace std;

// References
// http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
// https://en.wikipedia.org/wiki/Rijndael_S-box
// https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
// https://en.wikipedia.org/wiki/Rijndael_key_schedule

// AES uses 10 rounds for 128-bit keys
const unsigned int ROUNDS = 10;
const unsigned int MAT_SIZE = 4;
const unsigned int MAT_SIZE_FULL = MAT_SIZE*MAT_SIZE;

/**
 * Print an unsigned char in hexadecimal format
 * @param byte 1 byte
 */
void printByte(unsigned char byte) {
  cout << hex << uppercase << (int) byte;
}


// Struct for storing a block of 16 bytes as matrix
struct BLOCK_MAT {
  unsigned char matrix[MAT_SIZE][MAT_SIZE];

  BLOCK_MAT(){};

  void setVal(int r, int c, unsigned char data) {
    matrix[r][c] = data;
  }

  unsigned char getVal(int r, int c) {
    return matrix[r][c];
  }

  void print() {
    for(int i = 0; i < MAT_SIZE; ++i) {
      for(int j = 0; j < MAT_SIZE; ++j) {
        printByte(matrix[j][i]);
      }
    }
  }

  void printMat() {
    for(int i = 0; i < MAT_SIZE; ++i) {
      for(int j = 0; j < MAT_SIZE; ++j) {
        cout << hex << uppercase << "[" << (int) matrix[i][j] << "] ";
      }
      cout << endl;
    }
  }
};

void testOut(unsigned char* in, int size) {
    int count = 0;
    for(int i = 0; i < size; ++i) {
      count++;
      cout << hex << uppercase << (int) in[i];
      if(count == 4) {
        cout << endl << endl;
        count = 0;
      }
    }
}

void testIn(unsigned char* in, string value) {
  for(int i = 0; i < 16; i=2+i) {
    in[i] = value[i] + value[i+1];
  }
}

void printWord(unsigned char* word) {
  for(int i = 0; i < 4; ++i) {
    cout << hex << uppercase << (int) word[i];
  }
  cout << endl;
}

void printBlock(unsigned char* block) {
  for(int i = 0; i < 16; ++i) {
    cout << hex << uppercase << (int) block[i];
  }
  cout << endl;
}

/**
 * Print one block of unsigned chars in hexadecimal format
 * @param mat 16 bytes
 */
void printHexMat(BLOCK_MAT& mat) {
  for(int i = 0; i < MAT_SIZE; ++i) {
    for(int j = 0; j < MAT_SIZE; ++j) {
      printByte(mat.getVal(j, i));
    }
  }
  cout << endl;
}


// Struct for storing a block of 16 bytes and an unsigned char array
struct BLOCK {
  unsigned char val[MAT_SIZE_FULL];

  BLOCK(){};

  void print() {
    for(int i = 0; i < MAT_SIZE_FULL; ++i) {
      printByte(val[i]);
    }
  }

  void printMat() {
    for(int i = 0; i < MAT_SIZE_FULL; ++i) {
      cout << hex << uppercase << "[" << (int) val[i] << "] ";

      if((i+1) % 4 == 0) {
        cout << endl;
      }
    }
  }

};

void expandKey(unsigned char* in);

void addRoundKey(BLOCK_MAT&, unsigned char* key);

void subBytes(unsigned char* in);

void shiftRows(unsigned char* in);

void mixColumns(unsigned char* in);

void AES_Encrypt(BLOCK_MAT&, unsigned char* key);

void rotWord(unsigned char*, int offset);

void subWord(unsigned char*, int offset);

void scheduleCore(unsigned char*, int r);

int sbox(int n);
int rcon(int n);
int multBy2(int n);
int multBy3(int n);



 
#endif



